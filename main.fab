//NES recreation of the Game & Watch game "Ball"
//Blast_Brothers 2025
//for the Game Genie Game Jam 
//https://forums.nesdev.org/viewtopic.php?t=26222

data /rlz //compressed data block
    [] main_tilemap
        file(rlz, "tilemap.bin") //the initial background tilemap

ct U[25] main_palette = U[25](
    $3D, $3D, $0F, //BG
    $3D, $3D, $11,
    $3D, $3D, $00,
    $3D, $3D, $29,

    $3D, $3D, $0F, //sprites
    $3D, $3D, $11,
    $3D, $3D, $00,
    $3D, $3D, $29,

    $3D //Backdrop color
)

ct U GAME_STATE_IDLE = 0
ct U GAME_STATE_GAMEA = 1
ct U GAME_STATE_GAMEB = 2
ct U GAME_STATE_END = 3 //for after a ball falls but before we go back to idle

ct U ARMS_LEFT = 0
ct U ARMS_MIDDLE = 1
ct U ARMS_RIGHT = 2

vars /vars_main
    //nesfab has a 'mode' syntax but I don't feel like messing with that right now.
    // see GAME_STATE_ consts for details
    U game_state = 0

    //Where player's arms are. See ARMS_ consts for details
    U arms_pos = ARMS_MIDDLE

    //written to PPUMASK and PPUCTRL at the start of each frame.
    U ppumask_mirror = (PPUMASK_ON | PPUMASK_NO_CLIP | PPUMASK_EMPHASIZE_R | PPUMASK_EMPHASIZE_G)
    U ppuctrl_mirror = (PPUCTRL_NT_2000 | PPUCTRL_NMI_ON)

fn init()
    {PPUMASK}(0)

    palette = main_palette
    ppu_upload_palette()

    //clear NT (including attribute table)
    ppu_set_addr($2000)
    for U y = 0; y < 31; y += 1
        for U x = 0; x < 64; x += 1
            {PPUDATA}($00)

    //Send screen data to NT
    ppu_set_addr($2000)
    ppu_upload_rlz(@main_tilemap)

    //make minor adjustments to attribute table to draw blue bars at top and bottom
    ppu_set_addr($23C0)
    {PPUDATA}(%000000101)
    {PPUDATA}(%000000101)
    {PPUDATA}(%000000101)
    {PPUDATA}(%000000101)
    {PPUDATA}(%000000101)
    {PPUDATA}(%000000101)
    {PPUDATA}(%000000101)
    {PPUDATA}(%000000101)

    ppu_set_addr($23F8)
    {PPUDATA}(%000000101)
    {PPUDATA}(%000000101)
    {PPUDATA}(%000000101)
    {PPUDATA}(%000000101)
    {PPUDATA}(%000000101)
    {PPUDATA}(%000000101)
    {PPUDATA}(%000000101)
    {PPUDATA}(%000000101)
    
    //hide sprites
    hide_oam(0)

    //Turn rendering back on
    {PPUMASK}(ppumask_mirror)
    {PPUCTRL}(ppuctrl_mirror)

nmi main_nmi()
    ppu_upload_oam_poll_pads(0)
    ppu_reset_scroll(0, 0)

    //disable rendering
    {PPUMASK}(0)

    update_sprites()

    //re-enable rendering
    {PPUMASK}(ppumask_mirror)
    {PPUCTRL}(ppuctrl_mirror)

fn game_a_setup()
    arms_pos = ARMS_LEFT

mode main()
: nmi main_nmi
    init()
    while true
        update_pads()
        //TODO if start is held but not released, draw high score
        //TODO if select is pressed, toggle between game A and game B

        if pads[0].released & BUTTON_START
            game_a_setup()
            game_state = GAME_STATE_GAMEA

        switch game_state
            case GAME_STATE_IDLE
                break
            case GAME_STATE_GAMEA
                if pads[0].pressed & BUTTON_LEFT
                    if arms_pos == ARMS_RIGHT
                        arms_pos = ARMS_MIDDLE
                    else
                        arms_pos = ARMS_LEFT
                if pads[0].pressed & BUTTON_RIGHT
                    if arms_pos == ARMS_LEFT
                        arms_pos = ARMS_MIDDLE
                    else
                        arms_pos = ARMS_RIGHT
                break
            case GAME_STATE_GAMEB
                //TODO
                break
            case GAME_STATE_END
                //TODO
                break
        nmi

chrrom
    file(fmt, "tileset.png")